type: edu
files:
  - name: src/main/java/org/hyperskill/cinema/MainActivity.kt
    visible: true
    text: |-
      package org.hyperskill.cinema
      
      import android.content.Context
      import android.os.Build
      import android.os.Bundle
      import android.view.Gravity
      import android.view.LayoutInflater
      import android.view.View
      import android.view.ViewGroup
      import android.view.ViewGroup.LayoutParams.MATCH_PARENT
      import android.view.ViewGroup.LayoutParams.WRAP_CONTENT
      import android.widget.Button
      import android.widget.EditText
      import android.widget.FrameLayout
      import android.widget.GridLayout
      import android.widget.LinearLayout
      
      import android.widget.TextView
      import androidx.annotation.RequiresApi
      import androidx.appcompat.app.AppCompatActivity
      import androidx.core.view.marginLeft
      import androidx.core.view.setMargins
      import org.w3c.dom.Text
      
      @Suppress("DEPRECATION")
      class MainActivity : AppCompatActivity() {
          @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)
              val layout =  findViewById<GridLayout>(R.id.cinema_room_places)
      
              for (i in 1..7) {
                  for (j in 1..8) {
                      layout.addView(Button(this).apply {
                          layoutParams = GridLayout.LayoutParams(
                              GridLayout.spec(GridLayout.UNDEFINED, 1f),
                              GridLayout.spec(GridLayout.UNDEFINED, 1f)).apply {
                                  width = 0
                                  height = 0
                                  setMargins(10)
                              setTextColor(resources.getColor(R.color.white))
                              setBackgroundColor(resources.getColor(R.color.colorPrimary))
                              }
                          gravity = Gravity.CENTER
                          val seatNumber = "$i.$j"
                          id = R.id.cinema_room_place_item_text
                          text = seatNumber
                      })
                  }
              }
      
      
      
          }
      
      //    fun getTicketPrice() {
      //        val textView = findViewById<TextView>(R.id.cinema_room_ticket_price)
      //
      //        val duration = intent.getFloatExtra("DURATION", 4.5f)
      //        val rating = intent.getIntExtra("RATING", 108)
      //        val profit = -(1f/90) * (duration * duration) + (2 * duration) + 90
      //        val price = (rating * profit) / 56
      //        textView.text = String.format("Estimated ticket price: $price$")
      //    }
      
          fun Context.dp(dp: Int): Int = (dp * resources.displayMetrics.density).toInt()
          inline fun View.dp(dp: Int): Int = context.dp(dp)
      }
    learner_created: false
  - name: src/main/res/drawable/ic_launcher_background.xml
    visible: true
    text: |
      <?xml version="1.0" encoding="utf-8"?>
      <vector xmlns:android="http://schemas.android.com/apk/res/android"
          android:width="108dp"
          android:height="108dp"
          android:viewportWidth="108"
          android:viewportHeight="108">
          <path
              android:fillColor="#008577"
              android:pathData="M0,0h108v108h-108z" />
          <path
              android:fillColor="#00000000"
              android:pathData="M9,0L9,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,0L19,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M29,0L29,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M39,0L39,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M49,0L49,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M59,0L59,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M69,0L69,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M79,0L79,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M89,0L89,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M99,0L99,108"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,9L108,9"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,19L108,19"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,29L108,29"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,39L108,39"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,49L108,49"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,59L108,59"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,69L108,69"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,79L108,79"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,89L108,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M0,99L108,99"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,29L89,29"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,39L89,39"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,49L89,49"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,59L89,59"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,69L89,69"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M19,79L89,79"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M29,19L29,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M39,19L39,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M49,19L49,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M59,19L59,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M69,19L69,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
          <path
              android:fillColor="#00000000"
              android:pathData="M79,19L79,89"
              android:strokeWidth="0.8"
              android:strokeColor="#33FFFFFF" />
      </vector>
    learner_created: false
  - name: src/main/res/drawable-v24/ic_launcher_foreground.xml
    visible: true
    text: |
      <vector xmlns:android="http://schemas.android.com/apk/res/android"
          xmlns:aapt="http://schemas.android.com/aapt"
          android:width="108dp"
          android:height="108dp"
          android:viewportWidth="108"
          android:viewportHeight="108">
          <path
              android:fillType="evenOdd"
              android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
              android:strokeWidth="1"
              android:strokeColor="#00000000">
              <aapt:attr name="android:fillColor">
                  <gradient
                      android:endX="78.5885"
                      android:endY="90.9159"
                      android:startX="48.7653"
                      android:startY="61.0927"
                      android:type="linear">
                      <item
                          android:color="#44000000"
                          android:offset="0.0" />
                      <item
                          android:color="#00000000"
                          android:offset="1.0" />
                  </gradient>
              </aapt:attr>
          </path>
          <path
              android:fillColor="#FFFFFF"
              android:fillType="nonZero"
              android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
              android:strokeWidth="1"
              android:strokeColor="#00000000" />
      </vector>
    learner_created: false
  - name: src/main/res/layout/activity_main.xml
    visible: true
    text: |
      <?xml version="1.0" encoding="utf-8"?>
      
      <LinearLayout
          xmlns:app="http://schemas.android.com/apk/res-auto"
          xmlns:tools="http://schemas.android.com/tools"
          xmlns:android="http://schemas.android.com/apk/res/android"
      
          android:orientation="vertical"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          android:weightSum="1">
      
          <TextView
              android:id="@+id/cinema_room_screen_text"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:layout_margin="16dp"
              android:gravity="center"
              android:padding="5dp"
              android:background="@color/colorPrimary"
              android:textColor="@color/white"
              android:textAlignment="center"
              android:text="@string/screen"
              />
      
          <GridLayout
              android:id="@+id/cinema_room_places"
              android:layout_width="match_parent"
              android:layout_height="0dp"
              android:layout_margin="16dp"
              android:columnCount="8"
              android:orientation="horizontal"
              android:layout_weight=".5">
      
          </GridLayout>
      
          <TextView
              android:id="@+id/cinema_room_ticket_price"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:layout_margin="16dp"
              android:gravity="center"
              android:padding="5dp"
              android:background="@color/colorPrimary"
              android:textColor="@color/white"
              android:textAlignment="center"
              />
      
      </LinearLayout>
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
          <background android:drawable="@drawable/ic_launcher_background" />
          <foreground android:drawable="@drawable/ic_launcher_foreground" />
      </adaptive-icon>
    learner_created: false
  - name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
          <background android:drawable="@drawable/ic_launcher_background" />
          <foreground android:drawable="@drawable/ic_launcher_foreground" />
      </adaptive-icon>
    learner_created: false
  - name: src/main/res/values/colors.xml
    visible: true
    text: |
      <?xml version="1.0" encoding="utf-8"?>
      <resources>
          <color name="colorPrimary">#008577</color>
          <color name="colorPrimaryDark">#00574B</color>
          <color name="colorAccent">#D81B60</color>
          <color name="white">#FFFFFF</color>
          <color name="black">#222222</color>
      </resources>
    learner_created: false
  - name: src/main/res/values/strings.xml
    visible: true
    text: |
      <resources>
          <string name="app_name">Cinema Room Manager</string>
          <string name="screen">Screen</string>
      
      </resources>
    learner_created: false
  - name: src/main/res/values/styles.xml
    visible: true
    text: |
      <resources>
      
          <!-- Base application theme. -->
          <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
              <!-- Customize your theme here. -->
              <item name="colorPrimary">@color/colorPrimary</item>
              <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
              <item name="colorAccent">@color/colorAccent</item>
          </style>
      
      </resources>
    learner_created: false
  - name: src/main/AndroidManifest.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="org.hyperskill.cinema">
      
        <application
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:roundIcon="@mipmap/ic_launcher_round"
            android:supportsRtl="true"
            android:theme="@style/AppTheme">
          <activity android:name="org.hyperskill.cinema.MainActivity">
            <intent-filter>
              <action android:name="android.intent.action.MAIN" />
      
              <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
          </activity>
        </application>
      
      </manifest>
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      apply plugin: 'com.android.application'
      apply plugin: 'kotlin-android'
      
      android {
          compileSdkVersion hs.android.compileSdkVersion
      
          defaultConfig {
              applicationId "org.hyperskill.cinema"
              minSdkVersion hs.android.minSdkVersion
              targetSdkVersion hs.android.targetSdkVersion
              versionCode 1
              versionName '1.0'
          }
      
      //    buildFeatures {
      //        viewBinding true
      //    }
      }
      
      dependencies {
      
          def kotlinVersion = hs.android.kotlinVersion
          implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
      
          def coreKtx = hs.android.lib.coreKtx
          implementation "androidx.core:core-ktx:$coreKtx"
      
          def appCompat = hs.android.lib.appCompat
          implementation "androidx.appcompat:appcompat:$appCompat"
      
          def constraintLayout = hs.android.lib.constraintLayout
          implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
      
          def material = hs.android.lib.material
          implementation "com.google.android.material:material:$material"
      
      }
    learner_created: false
  - name: src/main/res/values/ids.xml
    visible: true
    text: |-
      <?xml version="1.0" encoding="utf-8"?>
      <resources>
          <item name="cinema_room_place_item_text" type="id" />
      </resources>
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/abstraction/AbstractUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema.abstraction
      
      import android.app.Activity
      import android.app.AlertDialog
      import android.app.Dialog
      import android.content.Intent
      import android.os.Looper
      import android.view.View
      import android.widget.Button
      import android.widget.GridLayout
      import android.widget.TextView
      import androidx.cardview.widget.CardView
      import org.hyperskill.cinema.MainActivity
      import org.junit.Assert
      import org.junit.Assert.assertNotNull
      import org.robolectric.Shadows
      import org.robolectric.android.controller.ActivityController
      import org.robolectric.shadows.ShadowAlertDialog
      import java.util.regex.Matcher
      import java.util.regex.Pattern
      import kotlin.math.abs
      
      //Version 04.2022 B
      abstract class AbstractUnitTest<T : Activity>(
          activityClass: Class<T>,
      ) : ActivityUnitTest<T>(activityClass) {
      
      
          protected fun `most profitable movie`() = Intent().apply {
              putExtra("DURATION", 90)
              putExtra("RATING", 5.0f)
          }
      
          protected fun `default profitable movie`() = Intent().apply {
              putExtra("DURATION", 108)
              putExtra("RATING", 4.5f)
          }
      
          protected inline fun <reified A : Activity> ActivityController<A>.`launch this activity and execute`(
              arguments: Intent? = Intent(),
              crossinline action: A.() -> Unit
          ): ActivityController<A> {
              get().intent = arguments
              return try {
                  setup().also { it.get().apply(action) }
              } catch (ex: Exception) {
                  throw AssertionError(
                      "Exception, test failed with $ex\n${ex.stackTraceToString()}"
                  )
              }
          }
      
      
          protected fun MainActivity.`grid layout child`(index: Int): View {
              return find<GridLayout>("cinema_room_places").getChildAt(index)
          }
      
          protected fun MainActivity.`grid layout child`(index: (GridLayout) -> Int): View {
              val gridLayout = find<GridLayout>("cinema_room_places")
              return gridLayout.getChildAt(index(gridLayout))
          }
      
          protected fun View.indicator(): CardView {
              return find("cinema_room_place_indicator")
          }
      
          protected fun CardView.`color should be`(assertMessage: String, color: Int) {
              Assert.assertEquals(assertMessage, cardBackgroundColor.defaultColor, color)
          }
      
          protected fun CardView.`color shouldn't be`(assertMessage: String, color: Int) {
              Assert.assertNotEquals(assertMessage, cardBackgroundColor.defaultColor, color)
          }
      
          protected fun CardView.`color shouldn't be`(color: Int, assertMessage: (CardView) -> String) {
              Assert.assertNotEquals(assertMessage(this), cardBackgroundColor.defaultColor, color)
          }
      
          protected fun View.`perform click`() {
              performClick()
              Shadows.shadowOf(Looper.getMainLooper()).runToEndOfTasks()
          }
      
          protected fun `in alert dialog`(): AlertDialog {
              val message = "The dialog wasn't created previously or you import an androidx version instead of android"
      
              val alertDialog = ShadowAlertDialog.getLatestAlertDialog()
              assertNotNull(message, alertDialog)
              return alertDialog
          }
      
          protected fun AlertDialog.`for dialog title`(): TextView = find("alertTitle", "android")
      
          protected fun AlertDialog.`for dialog message`(): TextView = find("message", "android")
      
          protected fun AlertDialog.`for positive button`(): Button = getButton(Dialog.BUTTON_POSITIVE)
      
          protected fun AlertDialog.`for negative button`(): Button = getButton(Dialog.BUTTON_NEGATIVE)
      
          protected infix fun AlertDialog.`should be same as`(dialog: AlertDialog) {
              Assert.assertEquals(dialog, this)
          }
      
          protected fun AlertDialog.`should be same as`(assertMessage: String, dialog: AlertDialog) {
              Assert.assertEquals(assertMessage, dialog, this)
          }
      
          protected fun AlertDialog.`shouldn't be same as`(assertMessage: String, dialog: AlertDialog) {
              Assert.assertNotEquals(assertMessage, dialog, this)
          }
      
          protected fun AlertDialog.`shouldn't be same as`(
              dialog: AlertDialog,
              assertMessage: (AlertDialog) -> String
          ) {
              Assert.assertNotEquals(assertMessage(this), dialog, this)
          }
      
          protected infix fun TextView.`text should be`(string: String) {
              val actual = text.toString().lowercase()
              val expected = string.lowercase()
              Assert.assertEquals("Expected text '$string' in ${this.javaClass.simpleName}", expected, actual)
          }
      
          protected fun TextView.`text should`(action: (String) -> Unit) {
              action(text.toString())
          }
      
          protected fun TextView.`text should contain double`(assertMessage: String, value: Double, `with delta`: Double) {
              println("actual: $text |expected: $value")
              Assert.assertTrue(assertMessage, text.toString().`is contain double`(value, `with delta`))
          }
      
          protected fun TextView.`text should be`(errorMessage: String, expected: String) {
              println(text.toString())
              Assert.assertEquals(errorMessage, expected, text)
          }
      
          protected infix fun View.`visibility should be`(visibility: Int) {
              Assert.assertEquals("Expected visibility to be $visibility", visibility, this.visibility)
          }
      
          protected fun String.`is contain double`(expected: Double, `with delta`: Double): Boolean {
      
              val matcher: Matcher = Pattern.compile("[0-9]+(\\.[0-9]+)?").matcher(this)
              while (matcher.find()) {
                  val scanned = matcher.group().toDoubleOrNull() ?: continue
                  println("actual: $this |expected: $expected| diff: ${abs(scanned - expected)}")
                  if (abs(expected - scanned) < `with delta`) return true
              }
              return false
          }
      
          protected fun String.`is contain integer`(expected: Int): Boolean {
              println("actual: $this |expected: $expected")
              val matcher: Matcher = Pattern.compile("[0-9]+").matcher(this)
              while (matcher.find()) {
                  val scanned = matcher.group().toIntOrNull() ?: continue
                  if (expected == scanned) return true
              }
              return false
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/abstraction/ActivityUnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema.abstraction
      
      import android.app.Activity
      import org.robolectric.Robolectric
      import org.robolectric.android.controller.ActivityController
      
      //Version 03.2022
      /** Class that creates activity controller */
      abstract class ActivityUnitTest<T: Activity>(private val activityClass: Class<T>) {
      
          protected val activityController: ActivityController<T> by lazy {
              Robolectric.buildActivity(activityClass)
          }
      
          protected val activity: T by lazy {
              activityController.get()
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/abstraction/Extensions.kt
    visible: false
    text: |
      package org.hyperskill.cinema.abstraction
      
      import android.app.AlertDialog
      import android.content.Context
      import android.view.View
      import org.hyperskill.cinema.MainActivity
      import org.junit.Assert
      
      //Version 11.2023
      
      fun Context.identifier(id: String, `package`: String = packageName): Int {
          return resources.getIdentifier(id, "id", `package`)
      }
      
      inline fun <reified T : View> View.find(id: String): T {
          val maybeView: View? = findViewById(context.identifier(id))
      
          val (expectedClass, maybeActualClass) =
              if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                  T::class.java.canonicalName to maybeView.javaClass.canonicalName
              } else {
                  T::class.java.simpleName to maybeView?.javaClass?.simpleName
              }
          val idNotFoundMessage = "View with id \"$id\" was not found"
          val wrongClassMessage = "View with id \"$id\" is not from expected class. " +
                  "Expected $expectedClass found $maybeActualClass"
      
          Assert.assertNotNull(idNotFoundMessage, maybeView)
          Assert.assertTrue(wrongClassMessage, maybeView is T)
          return maybeView as T
      }
      
      inline fun <reified T : View> MainActivity.find(id: String): T {
      
          val maybeView: View? = findViewById(identifier(id))
      
          val (expectedClass, maybeActualClass) =
              if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                  T::class.java.canonicalName to maybeView.javaClass.canonicalName
              } else {
                  T::class.java.simpleName to maybeView?.javaClass?.simpleName
              }
          val idNotFoundMessage = "View with id \"$id\" was not found"
          val wrongClassMessage = "View with id \"$id\" is not from expected class. " +
                  "Expected $expectedClass found $maybeActualClass"
      
          Assert.assertNotNull(idNotFoundMessage, maybeView)
          Assert.assertTrue(wrongClassMessage, maybeView is T)
          return maybeView as T
      }
      
      inline fun <reified T : View> MainActivity.findOrNull(id: String): T? {
          val maybeView: View? = findViewById(identifier(id))
      
          val (expectedClass, maybeActualClass) =
              if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                  T::class.java.canonicalName to maybeView.javaClass.canonicalName
              } else {
                  T::class.java.simpleName to maybeView?.javaClass?.simpleName
              }
          val wrongClassMessage = "View with id \"$id\" is not from expected class. " +
                  "Expected $expectedClass found $maybeActualClass"
      
          Assert.assertTrue(wrongClassMessage, maybeView is T?)
          return maybeView as T?
      }
      
      inline fun <reified T : View> AlertDialog.find(id: String, `package`: String = context.packageName): T {
          val maybeView: View? = findViewById(context.identifier(id, `package`))
      
          val (expectedClass, maybeActualClass) =
              if(T::class.java.simpleName == maybeView?.javaClass?.simpleName) {
                  T::class.java.canonicalName to maybeView.javaClass.canonicalName
              } else {
                  T::class.java.simpleName to maybeView?.javaClass?.simpleName
              }
          val idNotFoundMessage = "View with id \"$id\" was not found"
          val wrongClassMessage = "View with id \"$id\" is not from expected class. " +
                  "Expected $expectedClass found $maybeActualClass"
      
          Assert.assertNotNull(idNotFoundMessage, maybeView)
          Assert.assertTrue(wrongClassMessage, maybeView is T)
          return maybeView as T
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/Stage1UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema
      
      import android.widget.GridLayout
      import android.widget.TextView
      import androidx.core.view.get
      import androidx.core.view.iterator
      import androidx.core.view.size
      import org.hyperskill.cinema.abstraction.AbstractUnitTest
      import org.hyperskill.cinema.abstraction.find
      import org.junit.Assert.assertEquals
      import org.junit.Assert.assertTrue
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.robolectric.RobolectricTestRunner
      
      //Version 04.2022 B
      @RunWith(RobolectricTestRunner::class)
      class Stage1UnitTest : AbstractUnitTest<MainActivity>(MainActivity::class.java) {
      
          private val `cinema room places`: GridLayout by lazy {
              activity.find("cinema_room_places")
          }
      
          private val `for screen text view`: TextView by lazy {
              activity.find("cinema_room_screen_text")
          }
      
      
          @Test
          fun `test should check screen view text`() {
              val message = "View with id \"cinema_room_screen_text\" should contain \"Screen\" as text."
      
              activityController.`launch this activity and execute` {
                  `for screen text view`.`text should be`(errorMessage = message, "Screen")
              }
          }
      
          @Test
          fun `test should check places columns count`() {
              val message = "View with id \"cinema_room_places\" should contain the correct amount of columns."
      
              activityController.`launch this activity and execute` {
                  assertEquals(message, 8, `cinema room places`.columnCount)
              }
          }
      
          @Test
          fun `test should check places rows count`() {
              val message = "View with id \"cinema_room_places\" should contain the correct amount of rows."
      
              activityController.`launch this activity and execute` {
                  assertEquals(message, 7, `cinema room places`.rowCount)
              }
          }
      
          @Test
          fun `test should check places seats`() {
              val message = "View with id \"cinema_room_places\" should contain the correct seat number."
      
              activityController.`launch this activity and execute` {
                  `cinema room places`.also { gridLayout ->
                      assertEquals(56, gridLayout.size)
                  }.iterator().asSequence().map { eitherSeatOrSeatWrapper ->
                      eitherSeatOrSeatWrapper.find<TextView>("cinema_room_place_item_text")
                  }.forEachIndexed { index, seat ->
                      val seatRow = index / 8 + 1
                      val seatColumn = index % 8 + 1
      
                      val seatText = seat.text
                      assertEquals(message, "${seatRow}.${seatColumn}", seatText)
                  }
              }
          }
      
          @Test
          fun `columns should be displayed in order`() {
              activityController.`launch this activity and execute` {
                  val rowSize  = `cinema room places`.rowCount
                  val colSize = `cinema room places`.columnCount
      
                  for(row in 0 until rowSize) {
                      var lastLeftPx = Int.MIN_VALUE
                      for(col in 0 until colSize) {
                          val index = row * colSize + col
                          val currentLeftPx = `cinema room places`[index].left
                          assertTrue("Columns should be displayed in order with crescent column numbers", currentLeftPx > lastLeftPx)
                          lastLeftPx = currentLeftPx
                      }
                  }
              }
          }
      
          @Test
          fun `rows should be displayed in order`() {
              activityController.`launch this activity and execute` {
                  val rowSize  = `cinema room places`.rowCount
                  val colSize = `cinema room places`.columnCount
      
                  for(col in 0 until colSize) {
                      var lastTopPx = Int.MIN_VALUE
                      for(row in 0 until rowSize) {
                          val index = row * colSize + col
                          val currentTopPx = `cinema room places`[index].top
                          assertTrue("Rows should be displayed in order with crescent row numbers", currentTopPx > lastTopPx)
                          lastTopPx = currentTopPx
                      }
                  }
              }
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/Stage2UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema
      
      import android.content.Intent
      import android.widget.TextView
      import org.hyperskill.cinema.abstraction.AbstractUnitTest
      import org.hyperskill.cinema.abstraction.find
      import org.junit.Assert.assertTrue
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.robolectric.RobolectricTestRunner
      
      //Version 04.2022 B
      @RunWith(RobolectricTestRunner::class)
      class Stage2UnitTest : AbstractUnitTest<MainActivity>(MainActivity::class.java) {
      
          companion object {
              private const val DOUBLE_ASSERT_DELTA = 0.1
          }
      
          private val `price text view` : TextView by lazy {
              activity.find("cinema_room_ticket_price")
          }
      
          @Test
          fun `test should check ticket price view with default arguments`() {
              val message = "Are default DURATION and RATING properties being used?"
      
              activityController.`launch this activity and execute` {
                  `price text view`.`text should contain double`(message, 14.18, DOUBLE_ASSERT_DELTA)
              }
          }
      
          @Test
          fun `test should check ticket price view with best arguments`() {
              val message = "Are DURATION and RATING properties received from intent?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `price text view`.`text should contain double`(message, 16.07, DOUBLE_ASSERT_DELTA)
              }
          }
      
          @Test
          fun `test should check ticket price view with custom arguments`() {
              val message = "Are DURATION and RATING properties received from intent?"
      
              activityController.`launch this activity and execute`(arguments = `custom profitable movie`()) {
                  `price text view`.`text should contain double`(message, 10.59, DOUBLE_ASSERT_DELTA)
              }
          }
      
          @Test
          fun `test should check ticket price view contains two digits after dot`() {
      
              activityController.`launch this activity and execute`(arguments = `custom profitable movie`()) {
                  val actualText = `price text view`.text
                  val message = "Make sure you have correctly formatted the ticket price message. The price should contain two numbers after the dot.\n" +
                          "Expected:<Estimated ticket price: [priceWithTwoDecimals]$>, Found:<$actualText>"
      
                  `price text view`.`text should`() { text ->
                      assertTrue(message, text.matches("(?i)^Estimated ticket price: ([1-9][0-9]*|0)(\\.[0-9][0-9])?\\$$".toRegex()))
                  }
              }
          }
      
          private fun `custom profitable movie`() = Intent().apply {
              putExtra("DURATION", 39)
              putExtra("RATING", 3.9f)
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/Stage4UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema
      
      import android.graphics.Color
      import android.view.View
      import org.hyperskill.cinema.abstraction.AbstractUnitTest
      import org.junit.Assert.*
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.robolectric.RobolectricTestRunner
      
      //Version 04.2022 B
      @RunWith(RobolectricTestRunner::class)
      class Stage4UnitTest : AbstractUnitTest<MainActivity>(MainActivity::class.java) {
      
      
          @Test
          fun `test should check dialog's title text`() {
              val message = "Make sure you properly pass row number and place number into dialog."
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for dialog title`().`text should be`(message, "Buy a ticket 1 row 6 place")
              }
          }
      
          @Test
          fun `test should check dialog's message text`() {
              val message = "Make sure you properly pass ticket price into dialog."
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for dialog message`().`text should`() { text ->
                      val startsWith = text.startsWith("Your ticket price is ")
                      val endsWith = text.endsWith("$")
                      val double = text.`is contain double`(expected = 24.11, `with delta` = 0.1)
                      val expected = "Your ticket price is 24.11$"
                      assertTrue("$message Expected:<$expected>, Found:<$text>", startsWith and endsWith and double)
                  }
              }
          }
      
          @Test
          fun `test should check booked place color via dialog`() {
              val message = "Make sure you change purchased cinema place indicator via cardBackgroundColor."
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`().`perform click`()
                  `grid layout child`(index = 5).indicator().`color should be`(message, Color.DKGRAY)
              }
          }
      
          @Test
          fun `test should check booked place availability via dialog`() {
              val message = "A place that was already purchased shouldn't show alert dialog on click."
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  val firstAlertDialog = `in alert dialog`().apply {
                      `for positive button`().`perform click`()
                  }
      
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`should be same as`(message, firstAlertDialog)
              }
          }
      
          @Test
          fun `test should check dialog's negative button text`() {
              activityController.`launch this activity and execute` {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for negative button`() `text should be` "Cancel purchase"
              }
          }
      
          @Test
          fun `test should check dialog's negative button visibility`() {
              activityController.`launch this activity and execute` {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for negative button`() `visibility should be` View.VISIBLE
              }
          }
      
          @Test
          fun `test should check dialog's positive button text`() {
              activityController.`launch this activity and execute` {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`() `text should be` "Buy a ticket"
              }
          }
      
          @Test
          fun `test should check dialog's positive button visibility`() {
              activityController.`launch this activity and execute` {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`() `visibility should be` View.VISIBLE
              }
          }
      
          @Test
          fun `test should check canceled booking place color via dialog`() {
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for negative button`().`perform click`()
      
                  `grid layout child`(index = 5).indicator().`color shouldn't be`(Color.DKGRAY) {
                      "You should do nothing if the purchase was canceled (Indicator color and Indication color should not be equal)"
                  }
              }
          }
      
          @Test
          fun `test should check canceled booking place availability via dialog`() {
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  val firstAlertDialog = `in alert dialog`().apply {
                      `for negative button`().`perform click`()
                  }
      
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`shouldn't be same as`(firstAlertDialog) { secondAlertDialog ->
                      "Alert dialog should be displayed again if the previous purchase was canceled (dialogs should be different)"
                  }
              }
          }
      }
    learner_created: false
  - name: src/test/java/org/hyperskill/cinema/Stage5UnitTest.kt
    visible: false
    text: |-
      package org.hyperskill.cinema
      
      import android.app.AlertDialog
      import android.widget.GridLayout
      import android.widget.TextView
      import androidx.core.view.forEachIndexed
      import org.hyperskill.cinema.abstraction.AbstractUnitTest
      import org.hyperskill.cinema.abstraction.find
      import org.junit.Assert.assertTrue
      import org.junit.Test
      import org.junit.runner.RunWith
      import org.robolectric.RobolectricTestRunner
      
      //Version 04.2022 B
      @RunWith(RobolectricTestRunner::class)
      class Stage5UnitTest : AbstractUnitTest<MainActivity>(MainActivity::class.java) {
      
      
          private val `for total income view` by lazy {
              activity.find<TextView>("cinema_room_total_income")
          }
      
          private val `for current income view` by lazy {
              activity.find<TextView>("cinema_room_current_income")
          }
      
          private val `for available seats view` by lazy {
              activity.find<TextView>("cinema_room_available_seats")
          }
      
          private val `for occupied seats view` by lazy {
              activity.find<TextView>("cinema_room_occupied_seats")
          }
      
          @Test
          fun `test should check total cinema income value for most profitable movie`() {
              val message = "Have you calculated total income properly?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `for total income view`.`text should` { text ->
                      val startsWith = text.startsWith("Total cinema income: ")
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(964.29, 0.1)
                      val expected = "Total cinema income: 964.29$"
      
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check total cinema income value for default profitable movie`() {
              val message = "Have you calculated total income properly?"
      
              activityController.`launch this activity and execute`(arguments = `default profitable movie`()) {
                  `for total income view`.`text should`() { text ->
                      val startsWith = text.startsWith("Total cinema income: ")
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(850.50, 0.1)
                      val expected = "Total cinema income: 850.50$"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check initial current cinema income value for most profitable movie`() {
              val message = "Have you calculated current income properly?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `for current income view`.`text should`() { text ->
                      val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(0.0, 0.1)
                      val expected = "Current cinema income: 0.00$"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check initial current cinema income value for default profitable movie`() {
              val message = "Have you calculated current income properly?"
      
              activityController.`launch this activity and execute`(arguments = `default profitable movie`()) {
                  `for current income view`.`text should`() { text ->
                      val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(0.0, 0.1)
                      val expected = "Current cinema income: 0.00$"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check current cinema income value for most profitable movie`() {
              val message = "Have you calculated current income properly?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`().`perform click`()
                  `for current income view`.`text should`() { text ->
                      val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(24.11, 0.1)
                      val expected = "Current cinema income: 24.11$"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check current cinema income value for default profitable movie`() {
              val message = "Have you calculated current income properly?"
      
              activityController.`launch this activity and execute`(arguments = `default profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`().`perform click`()
                  `for current income view`.`text should`() { text ->
                      val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                      val endsWith = text.endsWith("\$")
                      val containsDouble = text.`is contain double`(21.26, 0.1)
                      val expected = "Current cinema income: 21.26$"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && endsWith && containsDouble
                      )
                  }
              }
          }
      
          @Test
          fun `test should check initial available seats value`() {
              val message = "Have you really counted available seats?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `for available seats view`.`text should`() { text ->
                      val startsWith = text.startsWith("Available seats: ")
                      val containsInteger = text.`is contain integer`(56)
                      val expected = "Available seats: 56"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && containsInteger
                      )
                  }
              }
          }
      
          @Test
          fun `test should check available seats value`() {
              val message = "Have you really counted available seats?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`().`perform click`()
                  `for available seats view`.`text should`() { text ->
                      val startsWith = text.startsWith("Available seats: ", ignoreCase = true)
                      val containsInteger = text.`is contain integer`(55)
      
                      val expected = "Available seats: 55"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && containsInteger
                      )
                  }
              }
          }
      
          @Test
          fun `test should check initial occupied seats value`() {
              val message = "Have you really counted occupied seats?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `for occupied seats view`.`text should`() { text ->
                      val startsWith = text.startsWith("Occupied seats: ", ignoreCase = true)
                      val containsInteger = text.`is contain integer`(0)
                      val expected = "Occupied seats: 0"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && containsInteger
                      )
                  }
              }
          }
      
          @Test
          fun `test should check occupied seats value`() {
              val message = "Have you really counted occupied seats?"
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  `grid layout child`(index = 5).`perform click`()
                  `in alert dialog`().`for positive button`().`perform click`()
                  `for occupied seats view`.`text should`() { text ->
                      val startsWith = text.startsWith("Occupied seats: ", ignoreCase = true)
                      val containsInteger = text.`is contain integer`(1)
                      val expected = "Occupied seats: 1"
                      assertTrue(
                          "$message Expected:<$expected>, Found:<$text>",
                          startsWith && containsInteger
                      )
                  }
              }
          }
      
          @Test
          fun `when seat is clicked twice only first click should count`() {
              val message = "When seat is clicked twice only first click should count"
      
              lateinit var lastAlertDialog: AlertDialog
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  repeat(2) {
                      `grid layout child`(index = 10).`perform click`()
      
                      if(it == 0) {
                          lastAlertDialog = `in alert dialog`()
                          lastAlertDialog.`for positive button`().`perform click`()
                      } else {
                          val currentAlertDialog = `in alert dialog`()
                          currentAlertDialog.`should be same as`(lastAlertDialog)
                      }
      
                      `for occupied seats view`.`text should`() { text ->
                          val startsWith = text.startsWith("Occupied seats: ", ignoreCase = true)
                          val containsInteger = text.`is contain integer`(1)
                          val expected = "Occupied seats: 1"
                          assertTrue(
                              "$message Expected:<$expected>, Found:<$text>",
                              startsWith && containsInteger
                          )
                      }
                      `for available seats view`.`text should`() { text ->
                          val startsWith = text.startsWith("Available seats: ", ignoreCase = true)
                          val containsInteger = text.`is contain integer`(55)
                          val expected = "Available seats: 55"
                          assertTrue(
                              "$message Expected:<$expected>, Found:<$text>",
                              startsWith && containsInteger
                          )
                      }
                      `for current income view`.`text should`() { text ->
                          val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                          val endsWith = text.endsWith("\$")
                          val containsDouble = text.`is contain double`(21.81, 0.1)
                          val expected = "Current cinema income: 21.81$"
                          assertTrue(
                              "$message Expected:<$expected>, Found:<$text>",
                              startsWith && endsWith && containsDouble
                          )
                      }
                  }
              }
          }
      
          @Test
          fun `when all seats clicked final state should be displayed`() {
              val clickFailedToOpenNewDialog = "Failed to open new dialog after click on available seat"
              val occupiedSeatsCounterError = "Occupied Seats displayed wrong number"
              val availableSeatsCounterError = "Available Seats displayed wrong number"
              val totalIncomeCounterError = "Total Income displayed wrong number"
      
              var lastAlertDialog: AlertDialog? = null
      
              val expectedRowValues = listOf(
                  24.11, 21.81, 19.52,
                  17.22, 14.92, 12.63, 10.33
              ) // these values are rounded, but error margin should be enough to compensate comparing against values with higher precision
      
              var accumulatedIncome = 0.0
      
              activityController.`launch this activity and execute`(arguments = `most profitable movie`()) {
                  val placesGrid = find<GridLayout>("cinema_room_places")
                  placesGrid.forEachIndexed { seatIndex, seatCard ->
                      seatCard.`perform click`()
                      val currentAlertDialog = `in alert dialog`()
      
                      lastAlertDialog?.also { lastDialog ->
                          currentAlertDialog.`shouldn't be same as`(clickFailedToOpenNewDialog, lastDialog)
                      }
      
                      lastAlertDialog = currentAlertDialog
                      currentAlertDialog.`for positive button`().`perform click`()
      
                      `for occupied seats view`.`text should`() { text ->
                          val startsWith = text.startsWith("Occupied seats: ", ignoreCase = true)
                          val expectedSeatCount = 1 + seatIndex
                          val containsInteger = text.`is contain integer`(expectedSeatCount)
                          val expected = "Occupied seats: $expectedSeatCount"
      
                          assertTrue(
                              "$occupiedSeatsCounterError Expected:<$expected>, Found:<$text>",
                              startsWith && containsInteger
                          )
                      }
      
                      `for available seats view`.`text should`() { text ->
                          val startsWith = text.startsWith("Available seats: ", ignoreCase = true)
                          val expectedSeatCount = 56 - (seatIndex + 1)
                          val containsInteger = text.`is contain integer`(expectedSeatCount)
                          val expected = "Available seats: $expectedSeatCount"
      
                          assertTrue(
                              "$availableSeatsCounterError Expected:<$expected>, Found:<$text>",
                              startsWith && containsInteger
                          )
                      }
      
                      accumulatedIncome += expectedRowValues[seatIndex / 8]
      
                      `for current income view`.`text should`() { text ->
                          val startsWith = text.startsWith("Current cinema income: ", ignoreCase = true)
                          val endsWith = text.endsWith("\$")
                          val containsDouble = text.`is contain double`(accumulatedIncome, 0.1)
                          val expected = "Current cinema income: %.2f$".format(accumulatedIncome)
                          assertTrue(
                              "$totalIncomeCounterError Expected:<$expected>, Found:<$text>",
                              startsWith && endsWith && containsDouble
                          )
                      }
                  }
              }
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/14421#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 07 Jan 2024 12:02:08 UTC"
record: -1
